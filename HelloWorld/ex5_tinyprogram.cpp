//주석달기 ctrl+k, ctrl+c
//주석해제 ctrl+k, ctrl+u

//1. 이름과 점수를 입력받고, 다음과 같이 출력되는 프로그램을 작성하시오.
//이름입력: 두들낙서
//점수입력: 89
//두들낙서님의 점수는 89점입니다.

//2. 이차원 배열 출력해보기

#include <iostream>
#include <string>

using namespace std;


int main() {
	string name;
	int score;

	cout << " 이름입력 :";
	cin >> name ;
	cout << "점수 입력 : ";
	cin >> score;
	cout << name << "님의 점수는 " << score << " 점 입니다." << endl;

	// 범위기반 for 문 사용해서 2차원배열 출력하기
	
	int arr[2][3] = { {1,2,3},{4,5,6} };

	//=========여러가지 시도==================================
	// 시도 1 >> 에러 : n이 int 포인터여야 함.
	//for (int n : arr) {
	//	cout << n << endl;
	//}


	//시도 2 >>
	for (int *n : arr) {
		cout << *n << endl; 
	}
	// 출력값 1 4  
	// 각 행의 0번째 요소 출력됨
	// 배열 이름쓰면 그 주소값이 각 배열의 0번째 요소

	
	// 시도3 >> 완전 틀린 풀이
	//for (int* n : arr) {
	//	for (int m : n) {
	//		cout << m << ' ';
	//	}
	//}

	
	// 시도 4 >>
	// 이렇게는 출력은 되지만 우리가 원하는것은
	// 범위 기반 for 문만 사용하는 것
	//for (int* n : arr) {
	//	for (int i = 0; i < 3; i++) {
	//		cout << n[i] << ' ';
	//	}
	//}
	// 이것도 출력은 정상적으로 안됨
	//========================================================


    // 모범답안
	//===============1,2 for 문은 본질적으로는 비슷함 =====
	// 1. 범위기반 for문: 배열에 대한 <<< 레퍼런스 >>>를 써야함, 
	// 배열포인터 사용과 원리 비슷
	// 3개짜리 배열을 가리키는 인트형 변수 ln 을 만들겠다.
	// 레퍼런스 변수 사용할 때는 변수 이름만 적어도 가리키는 대상이라 
	// 사용할 때 & 안붙이고 이름만 써도 됨 ln
	for (int(&ln)[3] : arr ) { 
		for (int& col : ln) {
			cout << col << ' ';
		}
		cout << endl;
	}
	// auto 로 더 간편하게 많이 사용함
	for (auto& ln : arr) { 
		for (auto& col : ln) {
			cout << col << ' ';
		}
		cout << endl;
	}
	// 2. 배열포인터 사용해 2차원 배열 각 요소를 각각 출력함
	// 3개 짜리 인트형 배열을 가리키는 포인터 ln을 만들고, arr 저장해줌
	// 포인터를 사용할 때는 *해줘야 대상을 가리킴 *ln
	// 각 차원의 배열 갯수만큼 증가하면서 for loop
	for (int(*ln)[3] = arr; ln < arr + 2; ln++) { 
		for (int* c = *ln; c < *ln + 3; c++) {
			cout << *c << ' ';
		}
		cout << endl;
	}
	//==========================================================================

	// 3. 다음과 같은 함수 정의에서 컴파일 오류가 나는 이유는?
	// 이 함수들은 지금 main 함수 밖에 정의 되어야 하는데 귀찮아서 그냥 
	// 코맨트 아웃하고 이 안에 둠....
	
	// 이유1. 디폴트 변수는 오른쪽부터 줘야함 => 오른쪽으로 옮겨져도 에러
	// 이유2. 옮김으로써 두 함수의 구분이 어려워짐.
	// 
	// 직사각형 그리는 두가지 방식
	//1. 직사각형 네 변의 좌표를 매개변수로 받는다.
	//void drawRectangle(int l, int r, int t, int b) {

	//}
	//2. 직사각형 모서리의 좌표 (x,y) 와 너비, 높이를 받는다.
	//void drawRectangle(int w, int h, int x = 0, int y = 0) {

	//}





	return 0;
	
}
